apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: pihole
  name: pvc-pihole
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
status: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pihole-configmap
  namespace: pihole
data:
  TZ: 'Europe/Berlin'
  ADMIN_EMAIL: '<email>'
  DNS1: '127.0.0.1#5053'
  DNS2: '127.0.0.1#5053'
---
apiVersion: v1
kind: Secret
metadata:
  name: pihole-secret
  namespace: pihole
data:
  WEBPASSWORD: aXQ0bGlmZQ==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pihole
  namespace: pihole
  labels:
    app: pihole
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
    spec:
      containers:
        - name: pihole
          image: docker.io/pihole/pihole:2021.11
          envFrom:
            - configMapRef:
                name: pihole-configmap
            - secretRef:
                name: pihole-secret
          ports:
            - name: svc-53-udp
              containerPort: 53
              protocol: UDP
            - name: svc-53-tcp
              containerPort: 53
              protocol: TCP
            - name: svc-ui
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              port: svc-ui
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              port: svc-ui
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 10
          resources:
            limits:
              memory: '300Mi'
              cpu: '250m'
            requests:
              memory: '50Mi'
              cpu: '100m'
          volumeMounts:
            - mountPath: /etc/pihole
              name: pihole-etc
        - name: cloudflare-proxy-dns
          image: docker.io/cloudflare/cloudflared:2021.12.1
          args:
            - 'proxy-dns'
            - '--address'
            - '0.0.0.0'
            - '--port'
            - '5053'
            - '--metrics'
            - '0.0.0.0:8000'
            - '--max-upstream-conns'
            - '0'
            - '--upstream'
            - 'https://1.1.1.1/dns-query'
            - '--upstream'
            - 'https://1.0.0.1/dns-query'
          ports:
            - name: svc-53-udp
              containerPort: 5053
              protocol: UDP
            - name: svc-53-tcp
              containerPort: 5053
              protocol: TCP
            - name: svc-metrics
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              port: svc-metrics
              path: /metrics
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              port: svc-metrics
              path: /metrics
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 10
          resources:
            limits:
              memory: '50Mi'
              cpu: '100m'
            requests:
              memory: '10Mi'
              cpu: '50m'
      volumes:
        - name: pihole-etc
          persistentVolumeClaim:
            claimName: pvc-pihole
---
kind: Service
apiVersion: v1
metadata:
  name: pihole-ui-svc
  namespace: pihole
spec:
  selector:
    app: pihole
  type: ClusterIP
  ports:
    - name: 80-tcp
      port: 80
      targetPort: 80
      protocol: TCP
---
kind: Service
apiVersion: v1
metadata:
  name: pihole-dns-svc
  namespace: pihole
spec:
  selector:
    app: pihole
  type: ClusterIP
  clusterIP: 10.43.0.30
  ports:
    - name: 53-tcp
      port: 53
      targetPort: 53
      protocol: TCP
    - name: 53-udp
      port: 53
      targetPort: 53
      protocol: UDP
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns-udp
  namespace: pihole
spec:
  selector:
    app: pihole
  ports:
    - name: 53-udp
      port: 53
      targetPort: 53
      protocol: UDP
  externalTrafficPolicy: Local
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
      - ip: 192.168.10.10
---
apiVersion: v1
kind: Service
metadata:
  name: pihole-dns-tcp
  namespace: pihole
spec:
  selector:
    app: pihole
  ports:
    - name: 53-tcp
      port: 53
      targetPort: 53
      protocol: TCP
  externalTrafficPolicy: Local
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
      - ip: 192.168.10.10
